0. Pattern Searching 

method 1: naive algorithm--> best case = o(n) worst case o(m*(n-m+1)),, n = text length, m=pattern length

void search(char* pat, char* txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
 
    /* A loop to slide pat[] one by one */
    for (int i = 0; i <= N - M; i++) {
        int j;
 
        /* For current index i, check for pattern match */
        for (j = 0; j < M; j++)
            if (txt[i + j] != pat[j])
                break;
 
        if (j == M) // if pat[0...M-1] = txt[i, i+1, ...i+M-1]
            cout << "Pattern found at index "
                 << i << endl;
    }
}

method 2: efficient KMP algorithm.... preprocessing time=o(m),space=o(m) after that space=o(1) time=o(n) so overall time=o(n+m)~o(n) space=o(m) where n=len(text), m=len(pattern)

void KMPSearch(char* pat, char* txt)
{
    int M = strlen(pat);
    int N = strlen(txt);
  
    // create lps[] that will hold the longest prefix suffix
    // values for pattern
    int lps[M];
  
    // Preprocess the pattern (calculate lps[] array)
    preprocess(pat, M, lps);
  
    int i = 0; // index for txt[]
    int j = 0; // index for pat[]
    while (i < N) {
        if (pat[j] == txt[i]) {
            j++;
            i++;
        }
  
        if (j == M) {
            printf("Found pattern at index %d ", i - j);
            j = lps[j - 1];
        }
  
        // mismatch after j matches
        else if (i < N && pat[j] != txt[i]) {
            // Do not match lps[0..lps[j-1]] characters,
            // they will match anyway
            if (j != 0)
                j = lps[j - 1];
            else
                i = i + 1;
        }
    }
}

void preprocess(char *pat,int n,int *lps)
{
	 if(n<=1)return 0;
	 memset(lps,0,sizeof(lps));
	 int i=0,j=1;
	 while(i<j && j<n){
	     if(pat[i]!=pat[j]){j++;i=0;}
	     else {
	        lps[j]=lps[j-1]+1;
	        i++;
	        j++;
	     }
	 }
}


------------------------------------------------------------
1. Reverse a String

void reverseString(char[] s) {
        int left = 0, right = s.length - 1;
        while (left < right) {
            char tmp = s[left];
            s[left++] = s[right];
            s[right--] = tmp;
        }
    }
-----------------------------------------------
2. Check whether a String is Palindrome or not

void isPalindrome(char str[]) 
{ 
    // Start from leftmost and rightmost corners of str 
    int l = 0; 
    int h = strlen(str) - 1; 
  
    // Keep comparing characters while they are same 
    while (h > l) 
    { 
        if (str[l++] != str[h--]) 
        { 
            printf("%s is Not Palindrome", str); 
            return; 
        } 
    } 
    printf("%s is palindrome", str); 
} 
-----------------------------------------------
3. Find Duplicate characters in a string

void printDups(string str)
{
    map<char, int> count;
    for (int i = 0; i < str.length(); i++) {
        count[str[i]]++;
    }
 
    for (auto it : count) {
        if (it.second > 1)
            cout << it.first << ", count = " << it.second
                 << "\n";
    }
}

-----------------------------------------------
4. Why strings are immutable in Java?

-----------------------------------------------
5.1 check if a string is substring of another

naive: o(n^2)
efficient: o(n)
int strstr(string str, string target)
    {
 
        int t = 0;
        int len = str.length();
        int i;
 
        // Iterate from 0 to len - 1
        for (i = 0; i < len; i++) {
            if (t == target.length())
                break;
            if (str[i] == target[t])
                t++;
            else
                t = 0;
        }
 
        return t < target.length() ? -1 : i - t;
    }
-----------------------------------------------
5.2 Write a Code to check whether one string is a rotation of another

bool areRotations(string str1, string str2) 
{ 
   /* Check if sizes of two strings are same */
   if (str1.length() != str2.length()) 
        return false; 
  
   string temp = str1 + str1;  
  if(strstr(temp,str2)==-1)return false;
  return true;
} 

-----------------------------------------------
6. Write a Program to check whether a string is a valid shuffle of two strings or not

bool shuffleCheck(String first, String second, String result) {

    // check length of result is same as
    // sum of result of first and second
    if(first.length() + second.length() != result.length()) {
      return false;
    }
    // variables to track each character of 3 strings
    int i = 0, j = 0, k = 0;

    // iterate through all characters of result
    while (k != result.length()) {

      // check if first character of result matches with first character of first string
      if (i < first.length() && first.charAt(i) == result.charAt(k))
        i++;

      // check if first character of result matches the first character of second string
      else if (j < second.length() && second.charAt(j) == result.charAt(k))
        j++;

      // if the character doesn't match
      else {
        return false;
      }

      // access next character of result
      k++;
    }

    // after accessing all characters of result
    // if either first or second has some characters left
    if(i < first.length() || j < second.length()) {
      return false;
    }

    return true;
  }

-----------------------------------------------
7. Count and Say problem ===> o(2^n) , o(2^n)

string func(string s){
        string ans="";
        int count=1;
        char ch=s[0];
        for(int i=1;i<s.length();i++){
            if(s[i]!=ch){
                ans+=to_string(count)+ch;
                count=1;
                ch=s[i];
            }
            else count++;
        }
        return ans+to_string(count)+ch;
    }
    string countAndSay(int n) {
        if(n==1)return "1";
        string ans="1";
        for(int i=2;i<=n;i++){
            ans=func(ans);
        }
        return ans;
    }

-----------------------------------------------
8. Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]

(1) naive-- time o(n^3) space o(1)

int palin(string s){
    int i=0,j=s.length()-1;
    while(i<j){
        if(s[i]==s[j]){i++;j--;}
        else return 0;
    }
    return 1;
}
string check(string s){
    int n=s.length();
    int a=0,b=0;
    for(int i=0;i<n-1;i++){
        for(int j=i+1;j<n;j++){
            if(palin(s.substr(i,j-i+1))){
                if((b-a+1)<(j-i+1)){a=i;b=j;}
            }
        }
    }
    return s.substr(a,b-a+1);
}
int main() {
	int t;
	string s;
	cin>>t;
	while(t--){
	    cin>>s;
	    cout<<check(s)<<endl;
	}
	return 0;
}


(2) using DP time o(n^2) space o(n^2)


-----------------------------------------------
9. Find Longest Recurring Subsequence in String

-----------------------------------------------
10. Print all Subsequences of a string ==> time=o(2^n) space=o(1) if only print else o(2^n)

--no of subsequences= 2^n (including the empty string)
--if want the ans in sorted order then save in a set then sort.

void printSubsequence(string input, string output)
{
    // Base Case
    // if the input is empty print the output string
    if (input.empty()) {
        cout << output << endl;
        return;
    }
 
    // output is passed with including
    // the Ist characther of
    // Input string
    printSubsequence(input.substr(1), output + input[0]);
 
    // output is passed without
    // including the Ist character
    // of Input string
    printSubsequence(input.substr(1), output);
}

-----------------------------------------------
11. Print all the permutations of the given string

-----------------------------------------------
12. Split the Binary string into two substring with equal 0’s and 1’s.


int main() {
	string str,st="";
	cin>>str;
	int count0=0,count1=0,count=0;
	for(int i=0;i<str.length();i++){
	    if(str[i]=='0')count0++;
	    else count1++;
	    if(count1==count0){count++;count0=0;count1=0;st="";}
	    else st+=str[i];
	}
	if(st!="")cout<<-1;
	else cout<<count;
	return 0;
}

-----------------------------------------------
13. Word Wrap Problem [VERY IMP].

-----------------------------------------------
14. EDIT Distance [Very Imp]

-----------------------------------------------
15. Find next greater number with same set of digits. [Very Very IMP]

-----------------------------------------------
16. Balanced Parenthesis problem.[Imp]

-----------------------------------------------
17. Word break Problem[ Very Imp]

-----------------------------------------------
18. Rabin Karp Algo

-----------------------------------------------
19. find longest lps (KMP Algo) => time:o(m) , space:o(m)


//below is just the preprocessing step of kmp algo
int lps(string s)
	{
	    int n=s.length();
	   // if(n<=1)return 0;
	    int arr[n];
	    memset(arr,0,sizeof(arr));
	    int i=0,j=1;
	    while(i<j && j<n){
	        if(s[i]!=s[j]){j++;i=0;}
	        else {
	            arr[j]=arr[j-1]+1;
	            i++;
	            j++;
	        }
	    }
	    int ma=arr[0];
	    for(i=1;i<n;i++){
	        ma=max(ma,arr[i]);
	    }
	    return ma;
	}

-----------------------------------------------
20. Convert a Sentence into its equivalent mobile numeric keypad sequence.

string printSequence(string arr[],
                       string input)
{
    string output = "";
  
    // length of input string
    int n = input.length();
    for (int i=0; i<n; i++)
    {
        // Checking for space
        if (input[i] == ' ')
            output = output + "0";
  
        else
        {
            // Calculating index for each 
            // character
            int position = input[i]-'A';
            output = output + arr[position];
        }
    }
  
    // Output sequence
    return output;
}
  
// Driver function
int main()
{
    // storing the sequence in array
    string str[] = {"2","22","222",
                    "3","33","333",
                    "4","44","444",
                    "5","55","555",
                    "6","66","666",
                    "7","77","777","7777",
                    "8","88","888",
                    "9","99","999","9999"
                   };
  
    string input = "GEEKSFORGEEKS";
    cout << printSequence(str, input);
    return 0;
}

-----------------------------------------------
21. Minimum number of bracket reversals needed to make an expression balanced.

-----------------------------------------------
22. Count All Palindromic Subsequence in a given String.

-----------------------------------------------
23. Count of number of given string in 2D character array

-----------------------------------------------
24. Search a Word in a 2D Grid of characters.

-----------------------------------------------
25. Boyer Moore Algorithm for Pattern Searching.

-----------------------------------------------
26. Converting Roman Numerals to Decimal

-----------------------------------------------
27. Longest Common Prefix

-----------------------------------------------
28. Number of flips to make binary string alternate

-----------------------------------------------
29. Find the first repeated word in string.

-----------------------------------------------
30. Minimum number of swaps for bracket balancing.

-----------------------------------------------
31. Find the longest common subsequence between two strings.

-----------------------------------------------
32. Program to generate all possible valid IP addresses from given  string.

-----------------------------------------------
33. Write a program tofind the smallest window that contains all characters of string itself.

-----------------------------------------------
34. Rearrange characters in a string such that no two adjacent are same

-----------------------------------------------
35. Minimum characters to be added at front to make string palindrome

-----------------------------------------------
36. Given a sequence of words, print all anagrams together

-----------------------------------------------
37. Find the smallest window in a string containing all characters of another string

-----------------------------------------------
38. Recursively remove all adjacent duplicates

-----------------------------------------------
39. String matching where one string contains wildcard characters

-----------------------------------------------
40. Function to find Number of customers who could not get a computer

int runCustomerSimulation(int n, const char *seq)
{
    // seen[i] = 0, indicates that customer 'i' is not in cafe
    // seen[1] = 1, indicates that customer 'i' is in cafe but
    //              computer is not assigned yet.
    // seen[2] = 2, indicates that customer 'i' is in cafe and
    //              has occupied a computer.
    char seen[MAX_CHAR] = {0};
  
    // Initialize result which is number of customers who could
    // not get any computer.
    int res = 0;
  
    int occupied = 0;  // To keep track of occupied computers
  
    // Traverse the input sequence
    for (int i=0; seq[i]; i++)
    {
        // Find index of current character in seen[0...25]
        int ind = seq[i] - 'A';
  
        // If First occurrence of 'seq[i]'
        if (seen[ind] == 0)
        {
            // set the current character as seen
            seen[ind] = 1;
  
            // If number of occupied computers is less than
            // n, then assign a computer to new customer
            if (occupied < n)
            {
                occupied++;
  
                // Set the current character as occupying a computer
                seen[ind] = 2;
            }
  
            // Else this customer cannot get a computer,
            // increment result
            else
                res++;
        }
  
        // If this is second occurrence of 'seq[i]'
        else
        {
           // Decrement occupied only if this customer
           // was using a computer
           if (seen[ind] == 2)
               occupied--;
           seen[ind] = 0;
        }
    }
    return res;
}

-----------------------------------------------
41. Transform One String to Another using Minimum Number of Given Operation

int minOps(string& A, string& B)
{
    int m = A.length(), n = B.length();
 
     // This parts checks whether conversion is
     // possible or not
    if (n != m)
       return -1;
    int count[256];
    memset(count, 0, sizeof(count));
    for (int i=0; i<n; i++)   // count characters in A
       count[B[i]]++;
    for (int i=0; i<n; i++)   // subtract count for
       count[A[i]]--;         // every character in B
    for (int i=0; i<256; i++)   // Check if all counts become 0
      if (count[i])
         return -1;
 
    // This part calculates the number of operations required
    int res = 0;
    for (int i=n-1, j=n-1; i>=0; )
    {
        // If there is a mismatch, then keep incrementing
        // result 'res' until B[j] is not found in A[0..i]
        while (i>=0 && A[i] != B[j])
        {
            i--;
            res++;
        }
 
        // If A[i] and B[j] match
        if (i >= 0)
        {
            i--;
            j--;
        }
    }
    return res;
}

-----------------------------------------------
42. Check if two given strings are isomorphic to each other

bool areIsomorphic(string str1, string str2)
    {
       int n1=str1.length(),n2=str2.length();
       if(n1!=n2)return false;
       int m[256];
       bool seen[256]={false};
       memset(m,-1,sizeof(m));
       for(int i=0;i<n1;i++){
           if(m[str1[i]]==-1){
               if(seen[str2[i]]==true)return false;
               m[str1[i]]=str2[i];
               seen[str2[i]]=true;
           }
           else if(m[str1[i]]!=str2[i])return false;
       }
       return true;
    }

-----------------------------------------------
43. Recursively print all sentences that can be formed from list of word lists

-----------------------------------------------
