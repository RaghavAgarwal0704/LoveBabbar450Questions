1. Reverse a String

void reverseString(char[] s) {
        int left = 0, right = s.length - 1;
        while (left < right) {
            char tmp = s[left];
            s[left++] = s[right];
            s[right--] = tmp;
        }
    }
-----------------------------------------------
2. Check whether a String is Palindrome or not

void isPalindrome(char str[]) 
{ 
    // Start from leftmost and rightmost corners of str 
    int l = 0; 
    int h = strlen(str) - 1; 
  
    // Keep comparing characters while they are same 
    while (h > l) 
    { 
        if (str[l++] != str[h--]) 
        { 
            printf("%s is Not Palindrome", str); 
            return; 
        } 
    } 
    printf("%s is palindrome", str); 
} 
-----------------------------------------------
3. Find Duplicate characters in a string

void printDups(string str)
{
    map<char, int> count;
    for (int i = 0; i < str.length(); i++) {
        count[str[i]]++;
    }
 
    for (auto it : count) {
        if (it.second > 1)
            cout << it.first << ", count = " << it.second
                 << "\n";
    }
}

-----------------------------------------------
4. Why strings are immutable in Java?

-----------------------------------------------
5.1 check if a string is substring of another

naive: o(n^2)
efficient: o(n)
int strstr(string str, string target)
    {
 
        int t = 0;
        int len = str.length();
        int i;
 
        // Iterate from 0 to len - 1
        for (i = 0; i < len; i++) {
            if (t == target.length())
                break;
            if (str[i] == target[t])
                t++;
            else
                t = 0;
        }
 
        return t < target.length() ? -1 : i - t;
    }
-----------------------------------------------
5.2 Write a Code to check whether one string is a rotation of another

bool areRotations(string str1, string str2) 
{ 
   /* Check if sizes of two strings are same */
   if (str1.length() != str2.length()) 
        return false; 
  
   string temp = str1 + str1;  
  if(strstr(temp,str2)==-1)return false;
  return true;
} 

-----------------------------------------------
6. Write a Program to check whether a string is a valid shuffle of two strings or not

bool shuffleCheck(String first, String second, String result) {

    // check length of result is same as
    // sum of result of first and second
    if(first.length() + second.length() != result.length()) {
      return false;
    }
    // variables to track each character of 3 strings
    int i = 0, j = 0, k = 0;

    // iterate through all characters of result
    while (k != result.length()) {

      // check if first character of result matches with first character of first string
      if (i < first.length() && first.charAt(i) == result.charAt(k))
        i++;

      // check if first character of result matches the first character of second string
      else if (j < second.length() && second.charAt(j) == result.charAt(k))
        j++;

      // if the character doesn't match
      else {
        return false;
      }

      // access next character of result
      k++;
    }

    // after accessing all characters of result
    // if either first or second has some characters left
    if(i < first.length() || j < second.length()) {
      return false;
    }

    return true;
  }

-----------------------------------------------
7. Count and Say problem
string func(string s){
        string ans="";
        int count=1;
        char ch=s[0];
        for(int i=1;i<s.length();i++){
            if(s[i]!=ch){
                ans+=to_string(count)+ch;
                count=1;
                ch=s[i];
            }
            else count++;
        }
        return ans+to_string(count)+ch;
    }
    string countAndSay(int n) {
        if(n==1)return "1";
        string ans="1";
        for(int i=2;i<=n;i++){
            ans=func(ans);
        }
        return ans;
    }

-----------------------------------------------
8. Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]

-----------------------------------------------
9. Find Longest Recurring Subsequence in String

-----------------------------------------------
10. Print all Subsequences of a string.

-----------------------------------------------
11. Print all the permutations of the given string

-----------------------------------------------
12. Split the Binary string into two substring with equal 0’s and 1’s

-----------------------------------------------
13. Word Wrap Problem [VERY IMP].

-----------------------------------------------
14. EDIT Distance [Very Imp]

-----------------------------------------------
15. Find next greater number with same set of digits. [Very Very IMP]

-----------------------------------------------
16. Balanced Parenthesis problem.[Imp]

-----------------------------------------------
17. Word break Problem[ Very Imp]

-----------------------------------------------
18. Rabin Karp Algo

-----------------------------------------------
19. KMP Algo

-----------------------------------------------
20. Convert a Sentence into its equivalent mobile numeric keypad sequence.

-----------------------------------------------
21. Minimum number of bracket reversals needed to make an expression balanced.

-----------------------------------------------
22. Count All Palindromic Subsequence in a given String.

-----------------------------------------------
23. Count of number of given string in 2D character array

-----------------------------------------------
24. Search a Word in a 2D Grid of characters.

-----------------------------------------------
25. Boyer Moore Algorithm for Pattern Searching.

-----------------------------------------------
26. Converting Roman Numerals to Decimal

-----------------------------------------------
27. Longest Common Prefix

-----------------------------------------------
28. Number of flips to make binary string alternate

-----------------------------------------------
29. Find the first repeated word in string.

-----------------------------------------------
30. Minimum number of swaps for bracket balancing.

-----------------------------------------------
31. Find the longest common subsequence between two strings.

-----------------------------------------------
32. Program to generate all possible valid IP addresses from given  string.

-----------------------------------------------
33. Write a program tofind the smallest window that contains all characters of string itself.

-----------------------------------------------
34. Rearrange characters in a string such that no two adjacent are same

-----------------------------------------------
35. Minimum characters to be added at front to make string palindrome

-----------------------------------------------
36. Given a sequence of words, print all anagrams together

-----------------------------------------------
37. Find the smallest window in a string containing all characters of another string

-----------------------------------------------
38. Recursively remove all adjacent duplicates

-----------------------------------------------
39. String matching where one string contains wildcard characters

-----------------------------------------------
40. Function to find Number of customers who could not get a computer

-----------------------------------------------
41. Transform One String to Another using Minimum Number of Given Operation

-----------------------------------------------
42. Check if two given strings are isomorphic to each other

-----------------------------------------------
43. Recursively print all sentences that can be formed from list of word lists

-----------------------------------------------
