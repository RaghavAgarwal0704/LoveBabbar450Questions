1. Count set bits in an integer--o(logn)

int setBits(int n) {
        // Write Your Code here
        int c=0;
        while(n){
            c+=n&1;
            n=n>>1;
        }
        return c;
    }
----------------------------------------------
2. Find the two non-repeating elements in an array of repeating elements

(1) use two loops -- time o(n^2) space o(1)
(2) use sorting time o(nlogn) space => depends which algo 
(3) use map to store frequencies-- time o(n) space o(n)

(4) using xor-- time o(n) space o(1)
code: https://www.geeksforgeeks.org/find-two-non-repeating-elements-in-an-array-of-repeating-elements/
first xor of all nos, now xor will have set bit that is present in either of the two non-repeating nos, get the pos of that set bit and divide the array into two sets 
such that one no is in one set and other in the other set, finally xor of first set=first no, xor of second set=second no.

void get2NonRepeatingNos(int arr[], int n,
                                int *x, int *y)
{
    /* Will hold Xor of all elements */
    int Xor = arr[0];
   
    /* Will have only single set bit of Xor */
    int set_bit_no;
    int i;
    *x = 0;
    *y = 0;
     
    /* Get the Xor of all elements */
    for(i = 1; i < n; i++)
    Xor ^= arr[i];
     
    /* Get the rightmost set bit in set_bit_no */--------> most imp => to get rightmost set bit in no n & 2s comp of n
    set_bit_no = Xor & ~(Xor-1);
     
    /* Now divide elements in two sets by
    comparing rightmost set bit of Xor with bit
    at same position in each element. */
    for(i = 0; i < n; i++)
    { 
         
      /*Xor of first set */
      if(arr[i] & set_bit_no)
        *x = *x ^ arr[i];
      /*Xor of second set*/
      else
      {
        *y = *y ^ arr[i];
      }
    }
}
----------------------------------------------
3. Count number of bits to be flipped to convert A to B

int countBitsFlip(int a, int b){
        
        // Your logic here
        int n=a^b,c=0;
        while(n){
            c+=n&1;
            n>>=1;
        }
        return c;
    }

----------------------------------------------
4. Count total set bits in all numbers from 1 to n


----------------------------------------------
5. Program to find whether a no is power of two

(1) binary representation--only 1 set bit time o(logn) space o(1)
bool isPowerofTwo(long long n){
    int count =0;
    while(n){
        if(n&1) count++;
        if(count>1) return false;
        n>>=1;
    }
    return count==1;
}

(2) no n, subract 1==n-1, now n&n-1 should be 0 --- time o(1) space o(1)

bool isPowerOfTwo (int x)
{
    /* First x in the below expression is for the case when x is 0 */
    return x && (!(x&(x-1)));
}

----------------------------------------------
6. Find position of the only set bit => time o(logn) space o(1)

int findPosition(int n) {
        // code here
        int pos=-1,count=0,cnt=0;
        while(n){
            count++;
            if(n&1==1){pos=count;cnt++;}
            n=n>>1;
        }
        if(cnt==1)return pos;
        return -1;
    }

----------------------------------------------
7. Copy set bits in a range

----------------------------------------------
8. Divide two integers without using multiplication, division and mod operator

----------------------------------------------
9. Calculate square of a number without using *, / and pow()

----------------------------------------------
10. Power Set

----------------------------------------------
