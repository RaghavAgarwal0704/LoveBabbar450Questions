1. Count set bits in an integer--o(logn)

int setBits(int n) {
        // Write Your Code here
        int c=0;
        while(n){
            c+=n&1;
            n=n>>1;
        }
        return c;
    }
----------------------------------------------
2. Find the two non-repeating elements in an array of repeating elements

----------------------------------------------
3. Count number of bits to be flipped to convert A to B

int countBitsFlip(int a, int b){
        
        // Your logic here
        int n=a^b,c=0;
        while(n){
            c+=n&1;
            n>>=1;
        }
        return c;
    }

----------------------------------------------
4. Count total set bits in all numbers from 1 to n


----------------------------------------------
5. Program to find whether a no is power of two

(1) binary representation--only 1 set bit time o(logn) space o(1)
bool isPowerofTwo(long long n){
    int count =0;
    while(n){
        if(n&1) count++;
        if(count>1) return false;
        n>>=1;
    }
    return count==1;
}

(2) no n, subract 1==n-1, now n&n-1 should be 0 --- time o(1) space o(1)

bool isPowerOfTwo (int x)
{
    /* First x in the below expression is for the case when x is 0 */
    return x && (!(x&(x-1)));
}

----------------------------------------------
6. Find position of the only set bit => time o(logn) space o(1)

int findPosition(int n) {
        // code here
        int pos=-1,count=0,cnt=0;
        while(n){
            count++;
            if(n&1==1){pos=count;cnt++;}
            n=n>>1;
        }
        if(cnt==1)return pos;
        return -1;
    }

----------------------------------------------
7. Copy set bits in a range

----------------------------------------------
8. Divide two integers without using multiplication, division and mod operator

----------------------------------------------
9. Calculate square of a number without using *, / and pow()

----------------------------------------------
10. Power Set

----------------------------------------------
