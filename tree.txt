1. LEVEL ORDER TRAVERSAL

vector<int> levelOrder(Node * node){
    if(node==nullptr)return vector<int>();
    queue<Node*>q;
    vector<int>vec;
    q.push(node);
    while(!q.empty()){
        if(q.front()->left!=nullptr)q.push(q.front()->left);
        if(q.front()->right!=nullptr)q.push(q.front()->right);
        vec.push_back(q.front()->data);
        q.pop();
    }
    return vec;
}

modified level order-->change direction of printing after every two levels
void modifiedLevelOrder(struct Node* node)
{
    // For null root
    if (node == NULL)
        return;
 
    if (node->left == NULL &&
                      node->right == NULL)
    {
        cout << node->data;
        return;
    }
 
    // Maintain a queue for normal
    // level order traversal
    queue<Node*> myQueue;
 
    /* Maintain a stack for printing nodes in reverse
       order after they are popped out from queue.*/
    stack<Node*> myStack;
 
    struct Node* temp = NULL;
 
    // sz is used for storing the count
    // of nodes in a level
    int sz;
 
    // Used for changing the direction
    // of level order traversal
    int ct = 0;
 
    // Used for changing the direction
    // of level order traversal
    bool rightToLeft = false;
 
    // Push root node to the queue
    myQueue.push(node);
 
    // Run this while loop till queue got empty
    while (!myQueue.empty())
    {
        ct++;
 
        sz = myQueue.size();
 
        // Do a normal level order traversal
        for (int i = 0; i < sz; i++)
        {
            temp = myQueue.front();
            myQueue.pop();
 
            /*For printing nodes from left to right,
            simply print the nodes in the order in which
            they are being popped out from the queue.*/
            if (rightToLeft == false)
                cout << temp->data << " ";           
 
            /* For printing nodes
            from right to left,
            push the nodes to stack
            instead of printing them.*/
            else
                myStack.push(temp);           
 
            if (temp->left)
                myQueue.push(temp->left);
 
            if (temp->right)
                myQueue.push(temp->right);
        }
 
        if (rightToLeft == true)
        {
 
            // for printing the nodes in order
            // from right to left
            while (!myStack.empty())
            {
                temp = myStack.top();
                myStack.pop();
 
                cout << temp->data << " ";
            }
        }
 
        /*Change the direction of printing
        nodes after every two levels.*/
        if (ct == 2)
        {
            rightToLeft = !rightToLeft;
            ct = 0;
        }
 
        cout << "\n";
    }
}

---------------------------------------------------------------
2. REVERSE LEVEL ORDER TRAVERSAL

vector<int> reverseLevelOrder(Node *root)
{
    queue<Node*>q;
    vector<int>vec;
    stack<int>s;
    q.push(root);
    while(!q.empty()){
        if(q.front()->right!=nullptr)q.push(q.front()->right);
        if(q.front()->left!=nullptr)q.push(q.front()->left);
        s.push(q.front()->data);
        q.pop();
    }
    while(!s.empty()){
        vec.push_back(s.top());
        s.pop();
    }
    return vec;
}

- Not using extra stack

vector<int> reverseLevelOrder(Node *root)
{
    queue<Node*> q;
    vector<int> ans;
    q.push(root);
    while (!q.empty()) {
        int n = q.size();
        int i=ans.size();
        while (n--) {
            Node* x = q.front();
            ans.push_back(x->data);
            q.pop();
            if (x->left) q.push(x->left);
            if (x->right) q.push(x->right);
        }
        reverse(ans.begin()+i,ans.end());
    }
    reverse(ans.begin(),ans.end());
    return ans;
}

---------------------------------------------------------------
3. HEIGHT OF A TREE

int height(struct Node* node){
        return node?1+max(height(node->left),height(node->right)):0;
}

iterative method:
int treeHeight(node *root)
{
    // Base Case
    if (root == NULL)
        return 0;
  
    // Create an empty queue for level order tarversal
    queue<node *> q;
  
    // Enqueue Root and initialize height
    q.push(root);
    int height = 0;
  
    while (1)
    {
        // nodeCount (queue size) indicates number of nodes
        // at current lelvel.
        int nodeCount = q.size();
        if (nodeCount == 0)
            return height;
  
        height++;
  
        // Dequeue all nodes of current level and Enqueue all
        // nodes of next level
        while (nodeCount > 0)
        {
            node *node = q.front();
            q.pop();
            if (node->left != NULL)
                q.push(node->left);
            if (node->right != NULL)
                q.push(node->right);
            nodeCount--;
        }
    }
}

---------------------------------------------------------------
4. DIAMETER OF A TREE

int diameterUtil(Node* root, int& h) {
    if (!root) {
        h = 0;
        return 0;
    }
    int lh = 0, rh = 0;
    int ld = diameterUtil(root->left, lh);
    int rd = diameterUtil(root->right, rh);
    h = max(lh, rh) + 1;
    return max(rh + lh + 1, max(ld, rd));
}

int diameter(Node* root) {
    if (!root) return 0;
    /* 
        NaÃ¯ve approach : need to calculate height for every node seperately;
        return max(height(root->left) + height(root->right) + 1, max(diameter(root->left), diameter(root->right)));
    */
    //Optimized soln
    int h = 0;
    return diameterUtil(root, h);
}

---------------------------------------------------------------
5. MIRROR OF A TREE

void mirror(Node *root) {
    if (root == NULL)
        return;
    mirror(root->left);
    mirror(root->right);
    Node *temp = root->left;
    root->left = root->right;
    root->right = temp;
}

---------------------------------------------------------------
6A. INORDER TRAVERSAL(ITERATIVE) (Using stack)

void inOrder(Node *root) {
    stack <Node*> st;
    Node* node=root;

    while (node || !st.empty()) {
        if (node)
            st.push(node), node = node->left;
        else {
            node = st.top();
            cout << node->data << " ";
            st.pop();
            node = node->right;
        }
    }
}

6B. INORDER TRAVERSAL(ITERATIVE) (Without using stack-Morris traversal)

---------------------------------------------------------------
7. INORDER TRAVERSAL (RECURSIVE)

void inOrder(Node* root){
    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}

---------------------------------------------------------------
8. PREORDER TRAVERSAL(ITERATIVE)


void preOrder(Node *root) {
    stack<Node *> st;
    st.push(root);
    while (!st.empty()) {
        Node *node = st.top();
        st.pop();
        cout << node->data << " ";
        if (node->right) st.push(node->right);
        if (node->left) st.push(node->left);
    }
}

---------------------------------------------------------------
9. PREORDER TRAVERSAL(RECURSIVE)

void preOrder(Node* root){
    cout<<root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);
}


---------------------------------------------------------------
10. POSTORDER TRAVERSAL (ITERATIVE)

void postOrder(Node *root) {
    stack<Node *> st;
    st.push(root);
    vector<int> ans;
    while (!st.empty()) {
        Node *node = st.top();
        ans.push_back(node->data);
        st.pop();
        if (node->left) st.push(node->left);
        if (node->right) st.push(node->right);
    }
    for (auto i = ans.rbegin(); i != ans.rend(); i++) cout << *i << " ";
}

---------------------------------------------------------------
11. POSTORDER TRAVERSAL (RECURSIVE)

void postOrder(Node* root){
    postOrder(root->left);
    postOrder(root->right);
    cout<<root->data<<" ";
}

---------------------------------------------------------------
12. LEFT VIEW OF TREE

vector<int> leftView(Node *root)
{
   vector<int>vec;
   queue<Node*>q;
   q.push(root);
   if(!root)return vec;
   while(!q.empty()){
       int size=q.size();
       vec.push_back(q.front()->data);
       while(size--){
           Node *temp=q.front();
           if(temp->left)q.push(temp->left);
           if(temp->right)q.push(temp->right);
           q.pop();
       }
   }
   return vec;
}

---------------------------------------------------------------
13. RIGHT VIEW OF TREE

vector<int> leftView(Node *root)
{
   vector<int>vec;
   queue<Node*>q;
   q.push(root);
   if(!root)return vec;
   while(!q.empty()){
       int size=q.size();
       vec.push_back(q.front()->data);
       while(size--){
           Node *temp=q.front();
           if(temp->right)q.push(temp->right);
           if(temp->left)q.push(temp->left);
           q.pop();
       }
   }
   return vec;
}

---------------------------------------------------------------
14. TOP VIEW OF TREE

void utilTopView(Node* root, int ht, int hz, map<int, pair<int, int>>& m) {
    if (!root) return;
    if (m.find(hz) == m.end())
        m[hz] = pair<int, int>(root->data, ht);
    else if (m[hz].second > ht)
        m[hz] = pair<int, int>(root->data, ht);
    utilTopView(root->left, ht + 1, hz - 1, m);
    utilTopView(root->right, ht + 1, hz + 1, m);
}
vector<int> topView(Node* root) {
    //map => [horizontal dist](key) : {root->val, height}(value)
    map<int, pair<int, int>> m;
    utilTopView(root, 0, 0, m);
    vector<int> ans;
    for (auto p : m) ans.push_back((p.second).first);
    return ans;
}

---------------------------------------------------------------
15. BOTTOM VIEW OF TREE

void utilBottomView(Node* root, int ht, int hz, map<int, pair<int, int>>& m) {
    if (!root) return;
    if (m.find(hz) == m.end())
        m[hz] = pair<int, int>(root->data, ht);
    else if (m[hz].second <= ht)
        m[hz] = pair<int, int>(root->data, ht);
    utilBottomView(root->left, ht + 1, hz - 1, m);
    utilBottomView(root->right, ht + 1, hz + 1, m);
}
vector<int> bottomView(Node* root) {
    //map => [horizontal dist](key) : {root->val, height}(value)
    map<int, pair<int, int>> m;
    utilBottomView(root, 0, 0, m);
    vector<int> ans;
    for (auto p : m) ans.push_back((p.second).first);
    return ans;
}

---------------------------------------------------------------
16. Zigzag traversal

vector<int> zigzag(Node* root) {
    vector<int> ans;
    if (!root) return ans;
    queue<Node*> q;
    q.push(root);
    int chance = 0;
    while (!q.empty()) {
        int n = q.size();
        vector<int> v;
        while (n--) {
            Node* temp = q.front();
            q.pop();
            if (temp->left) q.push(temp->left);
            if (temp->right) q.push(temp->right);
            v.push_back(temp->data);
        }
        chance++ & 1 ? ans.insert(ans.end(), v.begin(), v.end()) : ans.insert(ans.end(), v.rbegin(), v.rend());
    }
    return ans;
}

---------------------------------------------------------------
17. Check if tree is balanced

bool utilBalanced(Node* root, int& ht) {
    if (!root) return true;
    int lh = 0;
    bool lb = util(root->left, lh);
    int rh = 0;
    bool rb = util(root->right, rh);
    ht = max(lh + 1, rh + 1);
    return lb && rb && abs(lh - rh) <= 1;
}
bool isBalanced(Node* root) {
    int ht = 0;
    return util(root, ht);
}

---------------------------------------------------------------
18. diagonal traversal 
---------------------------------------------------------------
19. Vertical traversal

vector<int> verticalOrder(Node* root) {
    map<int, queue<int>> m;
    queue<pair<Node*, int>> q;
    q.push(pair<Node*, int>(root, 0));
    while (!q.empty()) {
        int n = q.size();
        while (n--) {
            Node* temp = q.front().first;
            int ht = q.front().second;
            m[ht].push(temp->data);
            q.pop();
            if (temp->left) q.push(pair<Node*, int>(temp->left, ht - 1));
            if (temp->right) q.push(pair<Node*, int>(temp->right, ht + 1));
        }
    }
    vector<int> ans;
    for (auto p : m)
        while (!p.second.empty()) {
            ans.push_back(p.second.front());
            p.second.pop();
        }
    return ans;
}

---------------------------------------------------------------
20. Boundary traversal
---------------------------------------------------------------
21. Construct Binary Tree from String with Bracket Representation

---------------------------------------------------------------
22. Convert Binary tree into Doubly Linked List

Node* bToDLL(Node* root) {
    if (!root) return root;
    Node* l = bToDLL(root->left);
    while (l && l->right) l = l->right;
    Node* r = bToDLL(root->right);
    root->left = l;
    if (l) l->right = root;
    root->right = r;
    if (r) r->left = root;
    while (root && root->left) root = root->left;
    return root;
}

---------------------------------------------------------------
23. Convert Binary tree into Sum tree

void toSumTree(Node *root) {
    if (!root) return;
    int l = (root->left ? root->left->data : 0);
    int r = (root->right ? root->right->data : 0);
    toSumTree(root->left);
    toSumTree(root->right);
    root->data = l + r + (root->left ? root->left->data : 0) + (root->right ? root->right->data : 0);
}

---------------------------------------------------------------
24. Construct Binary tree from Inorder and preorder traversal

Node* build(vector<int> preorder, vector<int> inorder) {
    if (!preorder.size() || !inorder.size())
        return NULL;
    Node *root = new Node(preorder[0]);
    int i = 0;
    for (i = 0; i < inorder.size(); i++)
        if (inorder[i] == root->val) break;
    vector<int> left(inorder.begin(), inorder.begin() + i);
    vector<int> right(inorder.begin() + i + 1, inorder.end());

    root->left = build(vector<int>(preorder.begin() + 1, preorder.begin() + left.size() + 1), left);
    root->right = build(vector<int>(preorder.begin() + left.size() + 1, preorder.end()), right);
    return root;
}

---------------------------------------------------------------
25. Find minimum swaps required to convert a Binary tree into BST

---------------------------------------------------------------
26. Check if Binary tree is Sum tree or not

---------------------------------------------------------------
27. Check if all leaf nodes are at same level or not

---------------------------------------------------------------
28. Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]

---------------------------------------------------------------
29. Check if 2 trees are mirror or not

//Iterative (BFS)
bool isMirror(Node *root1, Node *root2) {
    queue<Node *> q1;
    queue<Node *> q2;
    q1.push(root1);
    q2.push(root2);
    while (!q1.empty()) {
        if (q1.size() != q2.size()) return false;
        int n = q1.size();
        vector<int> v1;
        vector<int> v2;
        while (n--) {
            Node *node1 = q1.front();
            Node *node2 = q2.front();
            q1.pop();
            q2.pop();
            v1.push_back(node1 ? node1->data : -1);
            v2.push_back(node2 ? node2->data : -1);
            if (node1) {
                q1.push(node1->left);
                q1.push(node1->right);
            }
            if (node2) {
                q2.push(node2->right);
                q2.push(node2->left);
            }
        }
        if (v1 != v2) return false;
    }
    return true;
}
// Recursive(DFS)
bool isMirror(Node *root1, Node *root2) {
    if (!root1 && !root2) return true;
    if (root1 && root2)
        return (root1->data == root2->data) && isMirror(root1->left, root2->right) && isMirror(root1->right, root2->left);

    return false;
}

---------------------------------------------------------------
30. Sum of Nodes on the Longest path from root to leaf node 

---------------------------------------------------------------
31. Check if given graph is tree or not.  [ IMP ]

---------------------------------------------------------------
32. Find Largest subtree sum in a tree

---------------------------------------------------------------
33. Maximum Sum of nodes in Binary tree such that no two are adjacent 

---------------------------------------------------------------
34. Print all "K" Sum paths in a Binary tree

---------------------------------------------------------------
35. Find LCA in a Binary tree

---------------------------------------------------------------
36. Find distance between 2 nodes in a Binary tree

---------------------------------------------------------------
37. Kth Ancestor of node in a Binary tree

---------------------------------------------------------------
38. Find all Duplicate subtrees in a Binary tree [ IMP ]

---------------------------------------------------------------
39. Tree Isomorphism Problem

---------------------------------------------------------------

