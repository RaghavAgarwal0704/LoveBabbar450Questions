1. Implement Stack from Scratch

class Stack {
   private:
    int top;

   public:
    int arr[INT_MAX];
    Stack() { top = -1; }
    int push(int x) {
        if (++top >= INT_MAX) return INT_MIN;
        arr[top] = x;
        return x;
    }
    int pop() {
        if (top < 0) return INT_MIN;
        return arr[top--];
    }
    int topElement() {
        if (top < 0) return INT_MIN;
        return arr[top];
    }
    bool isEmpty() {
        return top < 0;
    }
};

-------------------------------------------------------------
2. Implement Queue from Scratch

#include<bits/stdc++.h>
using namespace std;

struct QueueNode
{
    int data;
    QueueNode *next;
};

class MyQueue {
private:
    int arr[100005];
    int front;
    int rear;

public :
    MyQueue(){front=0;rear=0;}
    void push(int);
    int pop();
};

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        MyQueue *sq = new MyQueue();

        int Q;
        cin>>Q;
        while(Q--){
        int QueryType=0;
        cin>>QueryType;
        if(QueryType==1)
        {
            int a;
            cin>>a;
            sq->push(a);
        }else if(QueryType==2){
            cout<<sq->pop()<<" ";

        }
        }
        cout<<endl;
    }
}
//Function to push an element x in a queue.
void MyQueue :: push(int x)
{
        // Your Code
        if(front==0){arr[++front]=x;rear++;}
        else arr[++rear]=x;
}

//Function to pop an element from queue and return that element.
int MyQueue :: pop()
{
        // Your Code 
        if(front==0)return -1;
        else{
            int x=arr[front++];
            if(front>rear){front=rear=0;}
            return x;
        }
}

-------------------------------------------------------------
3. Implement 2 stack in an array

void twoStacks :: push1(int x)
{
    arr[++top1]=x;
}
   
/* The method push to push element into the stack 2*/
void twoStacks ::push2(int x)
{
    arr[--top2]=x;
}
   
/* The method pop to pop element from the stack 1 */
//Return the popped element
int twoStacks ::pop1()
{
    if(top1==-1)return -1;
    return arr[top1--];
}

/* The method pop to pop element from the stack 2 */
//Return the popped element
int twoStacks :: pop2()
{
    if(top2==size)return -1;
    return arr[top2++];
}
-------------------------------------------------------------
4. find the middle element of a stack



-------------------------------------------------------------
5. Implement "k" stacks in an Array

method 1 : divide array into k parts (n/k) => space inefficient

method 2 : both push and pop = O(1)


// A C++ program to demonstrate implementation of k stacks in a single
// array in time and space efficient way
#include<bits/stdc++.h>
using namespace std;

// A C++ class to represent k stacks in a single array of size n
class kStacks
{
	int *arr; // Array of size n to store actual content to be stored in stacks
	int *top; // Array of size k to store indexes of top elements of stacks
	int *next; // Array of size n to store next entry in all stacks
				// and free list
	int n, k;
	int free; // To store beginning index of free list
public:
	//constructor to create k stacks in an array of size n
	kStacks(int k, int n);

	// A utility function to check if there is space available
	bool isFull() { return (free == -1); }

	// To push an item in stack number 'sn' where sn is from 0 to k-1
	void push(int item, int sn);

	// To pop an from stack number 'sn' where sn is from 0 to k-1
	int pop(int sn);

	// To check whether stack number 'sn' is empty or not
	bool isEmpty(int sn) { return (top[sn] == -1); }
};

//constructor to create k stacks in an array of size n
kStacks::kStacks(int k1, int n1)
{
	// Initialize n and k, and allocate memory for all arrays
	k = k1, n = n1;
	arr = new int[n];
	top = new int[k];
	next = new int[n];

	// Initialize all stacks as empty
	for (int i = 0; i < k; i++)
		top[i] = -1;

	// Initialize all spaces as free
	free = 0;
	for (int i=0; i<n-1; i++)
		next[i] = i+1;
	next[n-1] = -1; // -1 is used to indicate end of free list
}

// To push an item in stack number 'sn' where sn is from 0 to k-1
void kStacks::push(int item, int sn)
{
	// Overflow check
	if (isFull())
	{
		cout << "\nStack Overflow\n";
		return;
	}

	int i = free;	 // Store index of first free slot

	// Update index of free slot to index of next slot in free list
	free = next[i];

	// Update next of top and then top for stack number 'sn'
	next[i] = top[sn];
	top[sn] = i;

	// Put the item in array
	arr[i] = item;
}

// To pop an from stack number 'sn' where sn is from 0 to k-1
int kStacks::pop(int sn)
{
	// Underflow check
	if (isEmpty(sn))
	{
		cout << "\nStack Underflow\n";
		return INT_MAX;
	}


	// Find index of top item in stack number 'sn'
	int i = top[sn];

	top[sn] = next[i]; // Change top to store next of previous top

	// Attach the previous top to the beginning of free list
	next[i] = free;
	free = i;

	// Return the previous top item
	return arr[i];
}

/* Driver program to test twStacks class */
int main()
{
	// Let us create 3 stacks in an array of size 10
	int k = 3, n = 10;
	kStacks ks(k, n);

	// Let us put some items in stack number 2
	ks.push(15, 2);
	ks.push(45, 2);

	// Let us put some items in stack number 1
	ks.push(17, 1);
	ks.push(49, 1);
	ks.push(39, 1);

	// Let us put some items in stack number 0
	ks.push(11, 0);
	ks.push(9, 0);
	ks.push(7, 0);

	cout << "Popped element from stack 2 is " << ks.pop(2) << endl;
	cout << "Popped element from stack 1 is " << ks.pop(1) << endl;
	cout << "Popped element from stack 0 is " << ks.pop(0) << endl;

	return 0;
}


-------------------------------------------------------------
6. Check the expression has valid or Balanced parenthesis or not.

bool validParenthesis(string x) {
    stack<char> s;
    for (char c : x) {
        if (c == '{' || c == '[' || c == '(')
            s.push(c);
        else if (c == '}' && !(s.size() > 0 && s.top() == '{'))
            return false;
        else if (c == ']' && !(s.size() > 0 && s.top() == '['))
            return false;
        else if (c == ')' && !(s.size() > 0 && s.top() == '('))
            return false;
        else
            s.pop();
    }
    return s.size() == 0;
}

-------------------------------------------------------------
7. Reverse a String using Stack

char* reverse(char *s, int len)
{
    stack<char>st;
    int i;
    for(i=0;i<len;i++){
        st.push(s[i]);
    }
    i=0;
    char* str=new char;
    str=s;
    while(!st.empty()){
        str[i++]=st.top();
        st.pop();
    }
    return str;
}


-------------------------------------------------------------
8. Design a Stack that supports getMin() in O(1) time and O(1) extra space.



-------------------------------------------------------------
9. Find the next Greater element

vector<int> nextGreaterElement(vector<int> arr, int n) {
    stack<int> s;
    s.push(arr[n - 1]);
    vector<int> ans(n, -1);
    for (int i = n - 2; i >= 0; i--) {
        if (arr[i] < s.top()) {
            ans[i] = s.top();
            s.push(arr[i]);
        } else {
            while (!s.empty() && arr[i] > s.top()) s.pop();
            if (s.empty())
                s.push(arr[i]);
            else
                ans[i] = s.top(), s.push(arr[i]);
        }
    }
    return ans;
}

-------------------------------------------------------------
10. The celebrity Problem

1) O(N*M) time O(1) space;
int celebrity(vector<vector<int> >& M, int n) 
{
    for(int j=0;j<M[0].size();j++){
        int sum=0;
        for(int i=0;i<n;i++)
            sum+=M[i][j];
        
        if(sum==n-1){                
            int i=0;
            for(i=0;i<n;i++)
                if(M[i][j]==0) break;
            for(int k=0;k<M[0].size();k++)
                if(M[i][k]==1) return -1;
            return i;
        }
    }
    return -1;
}

2) Using 2 pointers : O(1) space , O(N) time
int celebrity(vector<vector<int> >& M, int n) 
{
    int i=0;int j=n-1;
    while(i<j){
        if(M[i][j] && !M[j][i]) i++;
        else if(M[j][i] && !M[i][j]) j--;
        else i++,j--;
    }
    for(int k=0;k<M[0].size();k++) 
    if(i!=k && (M[i][k]==1 || M[k][i]==0)) return -1;
    return i;
}

-------------------------------------------------------------
11. Arithmetic Expression evaluation
doneee
-------------------------------------------------------------
12. Evaluation of Postfix expression (top-1 with top,  while for prefix top with top-1)

int evaluatePostfix(string s)
    {
        // Your code here
        stack<int>st;
        for(int i=0;i<s.length();i++){
            if(s[i]>47&&s[i]<58)st.push(s[i]-'0');
            else{
                int a=st.top();st.pop();
                int b=st.top();st.pop();
                switch(s[i]){
                    case '+':st.push(b+a);break;
                    case '-':st.push(b-a);break;
                    case '*':st.push(b*a);break;
                    case '/':st.push(b/a);break;
                }
            }
        }
        return st.top();
    }
-------------------------------------------------------------
13. Implement a method to insert an element at its bottom without using any other data structure.

===> using recursion

void insert_at_bottom(char x){

    if(st.Empty())
        st.push(x);

    else{
        /* All items are held in Function Call Stack until we
           reach end of the stack. When the stack becomes
           empty, the st.size() becomes 0, the
           above if part is executed and the item is inserted
           at the bottom */

        char a = st.top();
        st.pop();
        insert_at_bottom(x);

        //push all the items held in Function Call Stack
        //once the item is inserted at the bottom
        st.push(a);
    }
}

-------------------------------------------------------------
14. Reverse a stack using recursion

-------------------------------------------------------------
15. Sort a Stack using recursion

-------------------------------------------------------------
16. Merge Overlapping Intervals

-------------------------------------------------------------
17. Largest rectangular Area in Histogram

-------------------------------------------------------------
18. Length of the Longest Valid Substring

-------------------------------------------------------------
19. Expression contains redundant bracket or not

-------------------------------------------------------------
20. Implement Stack using Queue

-------------------------------------------------------------
21. Implement Stack using Deque

-------------------------------------------------------------
22. Stack Permutations (Check if an array is stack permutation of other)

-------------------------------------------------------------
23. Implement Queue using Stack  

-------------------------------------------------------------
24. Implement "n" queue in an array

-------------------------------------------------------------
25. Implement a Circular queue

-------------------------------------------------------------
26. LRU Cache Implementationa

-------------------------------------------------------------
27. Reverse a Queue using recursion

-------------------------------------------------------------
28. Reverse the first “K” elements of a queue

-------------------------------------------------------------
29. Interleave the first half of the queue with second half

-------------------------------------------------------------
30. Find the first circular tour that visits all Petrol Pumps

-------------------------------------------------------------
31. Minimum time required to rot all oranges

-------------------------------------------------------------
32. Distance of nearest cell having 1 in a binary matrix

-------------------------------------------------------------
33. First negative integer in every window of size “k”

-------------------------------------------------------------
34. Check if all levels of two trees are anagrams or not.

-------------------------------------------------------------
35. Sum of minimum and maximum elements of all subarrays of size “k”.

-------------------------------------------------------------
36. Minimum sum of squares of character counts in a given string after removing “k” characters.

-------------------------------------------------------------
37. Queue based approach or first non-repeating character in a stream.

-------------------------------------------------------------
38. Next Smaller Element

-------------------------------------------------------------
