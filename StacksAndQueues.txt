1. Implement Stack from Scratch

class Stack {
   private:
    int top;

   public:
    int arr[INT_MAX];
    Stack() { top = -1; }
    int push(int x) {
        if (++top >= INT_MAX) return INT_MIN;
        arr[top] = x;
        return x;
    }
    int pop() {
        if (top < 0) return INT_MIN;
        return arr[top--];
    }
    int topElement() {
        if (top < 0) return INT_MIN;
        return arr[top];
    }
    bool isEmpty() {
        return top < 0;
    }
};

-------------------------------------------------------------
2. Implement Queue from Scratch

#include<bits/stdc++.h>
using namespace std;

struct QueueNode
{
    int data;
    QueueNode *next;
};

class MyQueue {
private:
    int arr[100005];
    int front;
    int rear;

public :
    MyQueue(){front=0;rear=0;}
    void push(int);
    int pop();
};

int main()
{
    int T;
    cin>>T;
    while(T--)
    {
        MyQueue *sq = new MyQueue();

        int Q;
        cin>>Q;
        while(Q--){
        int QueryType=0;
        cin>>QueryType;
        if(QueryType==1)
        {
            int a;
            cin>>a;
            sq->push(a);
        }else if(QueryType==2){
            cout<<sq->pop()<<" ";

        }
        }
        cout<<endl;
    }
}
//Function to push an element x in a queue.
void MyQueue :: push(int x)
{
        // Your Code
        if(front==0){arr[++front]=x;rear++;}
        else arr[++rear]=x;
}

//Function to pop an element from queue and return that element.
int MyQueue :: pop()
{
        // Your Code 
        if(front==0)return -1;
        else{
            int x=arr[front++];
            if(front>rear){front=rear=0;}
            return x;
        }
}

-------------------------------------------------------------
3. Implement 2 stack in an array

-------------------------------------------------------------
4. find the middle element of a stack

-------------------------------------------------------------
5. Implement "N" stacks in an Array

-------------------------------------------------------------
6. Check the expression has valid or Balanced parenthesis or not.

bool validParenthesis(string x) {
    stack<char> s;
    for (char c : x) {
        if (c == '{' || c == '[' || c == '(')
            s.push(c);
        else if (c == '}' && !(s.size() > 0 && s.top() == '{'))
            return false;
        else if (c == ']' && !(s.size() > 0 && s.top() == '['))
            return false;
        else if (c == ')' && !(s.size() > 0 && s.top() == '('))
            return false;
        else
            s.pop();
    }
    return s.size() == 0;
}

-------------------------------------------------------------
7. Reverse a String using Stack

-------------------------------------------------------------
8. Design a Stack that supports getMin() in O(1) time and O(1) extra space.

-------------------------------------------------------------
9. Find the next Greater element

vector<int> nextGreaterElement(vector<int> arr, int n) {
    stack<int> s;
    s.push(arr[n - 1]);
    vector<int> ans(n, -1);
    for (int i = n - 2; i >= 0; i--) {
        if (arr[i] < s.top()) {
            ans[i] = s.top();
            s.push(arr[i]);
        } else {
            while (!s.empty() && arr[i] > s.top()) s.pop();
            if (s.empty())
                s.push(arr[i]);
            else
                ans[i] = s.top(), s.push(arr[i]);
        }
    }
    return ans;
}

-------------------------------------------------------------
10. The celebrity Problem

-------------------------------------------------------------
11. Arithmetic Expression evaluation

-------------------------------------------------------------
12. Evaluation of Postfix expression

-------------------------------------------------------------
13. Implement a method to insert an element at its bottom without using any other data structure.

-------------------------------------------------------------
14. Reverse a stack using recursion

-------------------------------------------------------------
15. Sort a Stack using recursion

-------------------------------------------------------------
16. Merge Overlapping Intervals

-------------------------------------------------------------
17. Largest rectangular Area in Histogram

-------------------------------------------------------------
18. Length of the Longest Valid Substring

-------------------------------------------------------------
19. Expression contains redundant bracket or not

-------------------------------------------------------------
20. Implement Stack using Queue

-------------------------------------------------------------
21. Implement Stack using Deque

-------------------------------------------------------------
22. Stack Permutations (Check if an array is stack permutation of other)

-------------------------------------------------------------
23. Implement Queue using Stack  

-------------------------------------------------------------
24. Implement "n" queue in an array

-------------------------------------------------------------
25. Implement a Circular queue

-------------------------------------------------------------
26. LRU Cache Implementationa

-------------------------------------------------------------
27. Reverse a Queue using recursion

-------------------------------------------------------------
28. Reverse the first “K” elements of a queue

-------------------------------------------------------------
29. Interleave the first half of the queue with second half

-------------------------------------------------------------
30. Find the first circular tour that visits all Petrol Pumps

-------------------------------------------------------------
31. Minimum time required to rot all oranges

-------------------------------------------------------------
32. Distance of nearest cell having 1 in a binary matrix

-------------------------------------------------------------
33. First negative integer in every window of size “k”

-------------------------------------------------------------
34. Check if all levels of two trees are anagrams or not.

-------------------------------------------------------------
35. Sum of minimum and maximum elements of all subarrays of size “k”.

-------------------------------------------------------------
36. Minimum sum of squares of character counts in a given string after removing “k” characters.

-------------------------------------------------------------
37. Queue based approach or first non-repeating character in a stream.

-------------------------------------------------------------
38. Next Smaller Element

-------------------------------------------------------------
